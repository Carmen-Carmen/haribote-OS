     1 00000000                                 ; haribote-os boot asm
     2 00000000                                 ; TAB=4
     3 00000000                                 [INSTRSET "i486p"]              ; 要使用486的指令集（必须移动到前面来，为啥？）
     4 00000000                                 
     5  = 00280000                              BOTPAK  EQU     0x00280000      ; bootpack装载的位置
     6  = 00100000                              DSKCAC  EQU     0x00100000      ; 磁盘缓存地址
     7  = 00008000                              DSKCAC0 EQU     0x00008000      ; 磁盘缓存地址（real mode）
     8  = 00000105                              VBEMODE EQU     0x105           ; 1024 * 768 * 8bit color
     9 00000000                                 ;	0x100 :  640 x  400 x 8bitカラー
    10 00000000                                 ;	0x101 :  640 x  480 x 8bitカラー
    11 00000000                                 ;	0x103 :  800 x  600 x 8bitカラー
    12 00000000                                 ;	0x105 : 1024 x  768 x 8bitカラー
    13 00000000                                 ;	0x107 : 1280 x 1024 x 8bitカラー
    14 00000000                                 
    15 00000000                                 ; 有关BOOT_INFO的信息，记录在内存中哪些地址
    16  = 00000FF0                              CYLS    EQU     0x0ff0          ; IPL中最终读到了哪个柱面
    17  = 00000FF1                              LEDS    EQU     0x0ff1          ; 
    18  = 00000FF2                              VMODE   EQU     0x0ff2          ; 关于颜色数目的信息、颜色的位数等
    19  = 00000FF4                              SCRNX   EQU     0x0ff4          ; 长分辨率
    20  = 00000FF6                              SCRNY   EQU     0x0ff6          ; 宽分辨率
    21  = 00000FF8                              VRAM    EQU     0x0ff8          ; video RAM，图像缓冲区的开始地址
    22 00000000                                 
    23 00000000                                         ; haribote.asm的内容会写在0x004200之后的地方
    24 00000000                                         ; 启动区装载在内存0x8000号地址
    25 00000000                                         ; 因此要执行磁盘映像文件（img）上0x004200号地址的程序，就应该被装载到内存上0x8000 + 0x4200 = 0xc200号地址上！
    26                                                  ORG     0xc200              ; 装载的内存地址
    27 0000C200                                 
    28 0000C200                                 ; 设置图形模式
    29 0000C200                                         ; 确定VBE是否存在
    30 0000C200 B8 9000                                 MOV     AX, 0x9000
    31 0000C203 8E C0                                   MOV     ES, AX
    32 0000C205 BF 0000                                 MOV     DI, 0           ; ES:DI开始的512字节会写入显卡能利用的VBE信息
    33 0000C208 B8 4F00                                 MOV     AX, 0x4f00
    34 0000C20B CD 10                                   INT     0x10
    35 0000C20D 3D 004F                                 CMP     AX, 0x004f      ; 如果有VBE存在，AX会变为0x004f
    36 0000C210 75 52                                   JNE     scrn320         ; 否则就使用320 * 200画面
    37 0000C212                                         ; 检查VBE版本，只有2.0及以上版本才能使用高分辨率
    38 0000C212 26 8B 45 04                             MOV     AX, [ES:DI+4] ; 把写在ES:DI处内存中的VBE信息取到AX
    39 0000C216 3D 0200                                 CMP     AX, 0x0200
    40 0000C219 72 49                                   JB      scrn320         ; 如果取得的版本 < 0x0200，则还是只能使用320 * 200画面
    41 0000C21B                                         ; 取得画面模式信息
    42 0000C21B B9 0105                                 MOV     CX, VBEMODE     ; VBEMODE = 0x105
    43 0000C21E B8 4F01                                 MOV     AX, 0x4f01
    44 0000C221 CD 10                                   INT     0x10
    45 0000C223 3D 004F                                 CMP     AX, 0x004f      ; 调用0x10中断后，如果AX是0x004f以外的值，就说明所指定的画面模式不可用
    46 0000C226 75 3C                                   JNE     scrn320
    47 0000C228                                         ; 画面模式的信息确认
    48 0000C228 26 80 7D 19 08                          CMP     BYTE [ES:DI+0x19], 8  ; 颜色数必须为8
    49 0000C22D 75 35                                   JNE     scrn320
    50 0000C22F 26 80 7D 1B 04                          CMP     BYTE [ES:DI+0x1b], 4  ; 颜色指定方法必须为4
    51 0000C234 75 2E                                   JNE     scrn320
    52 0000C236 26 8B 05                                MOV     AX, [ES:DI+0x00]      ; 取出属性模式
    53 0000C239 25 0080                                 AND     AX, 0x0080              ; 属性模式的bit7必须是1（不然不能加上0x4000再进行指定
    54 0000C23C 74 26                                   JZ      scrn320
    55 0000C23E                                 
    56 0000C23E                                         ; 画面模式的切换
    57 0000C23E BB 4105                                 MOV     BX, VBEMODE + 0x4000    ; 指定属性模式
    58 0000C241 B8 4F02                                 MOV     AX, 0x4f02              ; 设置显卡模式  
    59 0000C244 CD 10                                   INT     0x10                    ; CPU中断，调用显卡BIOS
    60 0000C246 C6 06 0FF2 08                           MOV     BYTE [VMODE], 8         ; 记录图像模式
    61 0000C24B 26 8B 45 12                             MOV     AX, [ES:DI+0x12]        ; 取出画面长度
    62 0000C24F A3 0FF4                                 MOV     [SCRNX], AX             ; 记录画面长度
    63 0000C252 26 8B 45 14                             MOV     AX, [ES:DI+0x14]        ; 取出画面宽度
    64 0000C256 A3 0FF6                                 MOV     [SCRNY], AX             ; 记录画面宽度
    65 0000C259 66 26 8B 45 28                          MOV     EAX, [ES:DI+0x28]       ; 取出VRAM开始地址
    66 0000C25E 66 A3 0FF8                              MOV     [VRAM], EAX             ; 图像缓冲区开始地址
    67 0000C262 EB 20                                   JMP     keystatus
    68 0000C264                                 
    69 0000C264                                 scrn320: 
    70 0000C264 B0 13                                   MOV     AL, 0x13
    71 0000C266 B4 00                                   MOV     AH, 0x00
    72 0000C268 CD 10                                   INT     0x10
    73 0000C26A C6 06 0FF2 08                           MOV     BYTE [VMODE], 8
    74 0000C26F C7 06 0FF4 0140                         MOV     WORD [SCRNX], 320
    75 0000C275 C7 06 0FF6 00C8                         MOV     WORD [SCRNY], 200
    76 0000C27B 66 C7 06 0FF8 000A0000                  MOV     DWORD [VRAM], 0x000a0000
    77 0000C284                                 
    78 0000C284                                 ; 将键盘LED灯的状态告知BIOS
    79 0000C284                                 keystatus:
    80 0000C284 B4 02                                   MOV     AH, 0x02
    81 0000C286 CD 16                                   INT     0x16                ; 16号CPU中断函数，调用键盘BIOS
    82 0000C288 A2 0FF1                                 MOV     [LEDS], AL
    83 0000C28B                                 
    84 0000C28B                                 ; 以下部分的用处：调用C语言编写的程序
    85 0000C28B                                 
    86 0000C28B                                 ; PIC关闭一切中断
    87 0000C28B                                 ;   根据AT兼容机的规格，如果要初始化PIC，必须在CLI（禁止中断）之前进行，否则有时会挂起
    88 0000C28B                                 ;   随后进行PIC的初始化
    89 0000C28B                                 
    90 0000C28B B0 FF                                   MOV     AL, 0xff
    91 0000C28D E6 21                                   OUT     0x21, AL            ; 把0xff传递给PIC0_IMR，即屏蔽PIC0的所有中断
    92 0000C28F 90                                      NOP                         ; 有些机种可能无法连续执行OUT指令，用No OPeration指令让CPU停止1个时钟周期
    93 0000C290 E6 A1                                   OUT     0xa1, AL            ; 把0xff传递给PIC1_IMR
    94 0000C292                                 
    95 0000C292 FA                                      CLI                         ; 禁止CPU级别的中断
    96 0000C293                                 
    97 0000C293                                 ; 为了让CPU能访问1MB以上的内存空间，需要设定A20GATE。A20GATE能解除为了兼容旧版16位操作系统默认限制只能使用1MB内存
    98 0000C293                                 
    99 0000C293 E8 00B5                                 CALL    waitkbdout          ; 有点像C语言编写的wait_KBC_sendready()
   100 0000C296 B0 D1                                   MOV     AL, 0xd1
   101 0000C298 E6 64                                   OUT     0x64, AL            ; 将0xd1传递给PORT_KEYCMD
   102 0000C29A E8 00AE                                 CALL    waitkbdout
   103 0000C29D B0 DF                                   MOV     AL, 0xdf            
   104 0000C29F E6 60                                   OUT     0x60, AL            ; 将0xdf传递给PORT_KEYDAT，0xdf相当于将A20GATE信号线变成ON的状态
   105 0000C2A1 E8 00A7                                 CALL    waitkbdout          ; 等待A20GATE的处理切实完成
   106 0000C2A4                                 
   107 0000C2A4                                 ; 切换到保护模式
   108 0000C2A4                                 
   109 0000C2A4 0F 01 16 C38A                           LGDT    [GDTR0]             ; 设定临时的GDT（后面还要在C语言中详细设定）
   110 0000C2A9 0F 20 C0                                MOV     EAX, CR0            ; CR0（control register 0）是特殊的32位寄存器，将其值代入同为32位的EAX寄存器，并作以下设置
   111 0000C2AC 66 25 7FFFFFFF                          AND     EAX, 0x7fffffff     ; 与运算，设第31位（bit31）为0（不用分页）paging enable, 0 - disable
   112 0000C2B2 66 83 C8 01                             OR      EAX, 0x00000001     ; 或运算，设bit1为1（为了切换到保护模式）PE, protect enable
   113 0000C2B6 0F 22 C0                                MOV     CR0, EAX            ; 把设定好的值还给CR0，就完成了 禁止分页的保护模式 的设定
   114 0000C2B9 EB 00                                   JMP     pipelineflush       ; 变成保护模式后，机器语言的解释会发生变化，CPU为了加快指令的执行速度使用了管道pipeline机制（流水？）
   115 0000C2BB                                 
   116 0000C2BB                                 pipelineflush: ; 进入流水模式，要对段寄存器的意思进行重新解释（不再是16位中乘16后再加算的意思）
   117 0000C2BB B8 0008                                 MOV     AX, 1 * 8
   118 0000C2BE                                         ; 除了CS以外所有段寄存器的值都变成0x0008，相当于"gdt + 1"的段
   119 0000C2BE 8E D8                                   MOV     DS, AX
   120 0000C2C0 8E C0                                   MOV     ES, AX
   121 0000C2C2 8E E0                                   MOV     FS, AX
   122 0000C2C4 8E E8                                   MOV     GS, AX
   123 0000C2C6 8E D0                                   MOV     SS, AX
   124 0000C2C8                                         
   125 0000C2C8                                 ; bootpack的转送
   126 0000C2C8                                         
   127 0000C2C8 66 BE 0000C390                          MOV     ESI, bootpack       ; 转送源，是bootpack.hrb
   128 0000C2CE 66 BF 00280000                          MOV     EDI, BOTPAK         ; 转送目的地，是bootpack应当装载的位置0x00280000
   129 0000C2D4 66 B9 00020000                          MOV     ECX, 512 * 1024 / 4 ; 转送数据大小，512字节比bootpack.hrb大很多，是预留的；以DW为1个单位，所以是字节数 / 4
   130 0000C2DA E8 0077                                 CALL    memcpy              ; 复制内存数据的函数
   131 0000C2DD                                 
   132 0000C2DD                                 ; 磁盘数据最终转送到它本来的位置
   133 0000C2DD                                 ; 先从启动扇区IPL开始转送
   134 0000C2DD 66 BE 00007C00                          MOV     ESI, 0x7c00         ; 转送源，IPL是ORG 0x7c00，即从0x7c00开始
   135 0000C2E3 66 BF 00100000                          MOV     EDI, DSKCAC         ; 转送目的地，磁盘缓存地址
   136 0000C2E9 66 B9 00000080                          MOV     ECX, 512 / 4
   137 0000C2EF E8 0062                                 CALL    memcpy
   138 0000C2F2                                 ; 转送剩下的内容
   139 0000C2F2 66 BE 00008200                          MOV     ESI, DSKCAC0 + 512  ; 转送源，real mode下写入的磁盘缓存地址，在IPL后的（+512）数据
   140 0000C2F8 66 BF 00100200                          MOV     EDI, DSKCAC + 512   ; 转送目的地，保护模式下的磁盘缓存地址，写在IPL之后
   141 0000C2FE 66 B9 00000000                          MOV     ECX, 0              ; 先把ECX寄存器置0
   142 0000C304 8A 0E 0FF0                              MOV     CL, BYTE [CYLS]     ; 读取0x0ff0号内存地址中存储的柱面数，放进ECX寄存器的低4位（CL）
   143 0000C308 66 69 C9 00001200                       IMUL    ECX, 512 * 18 * 2 / 4   ; integer multiple，对ECX中数据进行乘法运算
   144 0000C30F                                         ; 即要转送的数据单元数 = 柱面数 * 磁头数 * 扇区数（低4位） * 扇区字节数（512） / 4
   145 0000C30F 66 81 E9 00000080                       SUB     ECX, 512 / 4        ; 减去之前已经转送完毕的IPL（512字节）
   146 0000C316 E8 003B                                 CALL    memcpy
   147 0000C319                                 
   148 0000C319                                 ; 必须由asmhead来完成的工作至此已经全部做完，后续交给C语言编写的bootpack完成
   149 0000C319                                 ; bootpack的启动
   150 0000C319                                 
   151 0000C319 66 BB 00280000                          MOV     EBX, BOTPAK
   152 0000C31F 67 66 8B 4B 10                          MOV     ECX, [EBX + 16]     ; bootpack.hrb之后的第16号地址，值为0x11a8
   153 0000C324 66 83 C1 03                             ADD     ECX, 3              ; ECX += 3
   154 0000C328 66 C1 E9 02                             SHR     ECX, 2              ; 逻辑右移（SHift Right），相当于 ECX /= 4
   155 0000C32C 74 10                                   JZ      skip                ; Jump if Zero，即ECX没有内容了的时候
   156 0000C32E 67 66 8B 73 14                          MOV     ESI, [EBX + 20]     ; memcpy转送源，bootpack.hrb之后的第20号地址，值为0x10c8
   157 0000C333 66 01 DE                                ADD     ESI, EBX
   158 0000C336 67 66 8B 7B 0C                          MOV     EDI, [EBX + 12]     ; memcpy转送目的地，bootpack.hrb之后的第12号地址，值为0x00310000
   159 0000C33B E8 0016                                 CALL    memcpy              ; 实际上是将bootpack.hrb第0x10c8字节开始的0x11a8(4520)字节复制到0x00310000号内存地址去
   160 0000C33E                                 
   161 0000C33E                                 skip: ; 注意这个skip标签就算没有在JZ那边跳转，也会顺序执行下来
   162 0000C33E 67 66 8B 63 0C                          MOV     ESP, [EBX + 12]
   163 0000C343 66 EA 0000001B 0010                     JMP     DWORD 2 * 8: 0x0000001b ; 将2*8代入到CS中，同时移动到0x1b地址，即第2个段的0x1b号地址
   164 0000C34B                                         ; 第2个段的基址是0x00280000，所以实际上是从0x0028001b开始执行，这也是bootpack.hrb的0x1b号地址
   165 0000C34B                                 
   166 0000C34B                                 ; 之前用到的函数
   167 0000C34B                                 waitkbdout: 
   168 0000C34B E4 64                                   IN      AL, 0x64            
   169 0000C34D 24 02                                   AND     AL, 0x02            ; 与运算，把0x64号设备(PORT_KEY_STA)传入CPU的数据与0x02(KEYSTA_SEND_NOTREADY)做比较
   170 0000C34F E4 60                                   IN      AL, 0x60            ; 从0x60号设备中空读一次，晴空数据接收缓冲区中的垃圾数据
   171 0000C351 75 F8                                   JNZ     waitkbdout          ; Jump if Not Zero，AND AL, 0x02的执行结果如果不是0，那么键盘就还没准备好；否则就return
   172 0000C353 C3                                      RET                         ; 有return，就是跳回原来执行到的位置
   173 0000C354                                 
   174 0000C354                                 memcpy: ; 复制内存数据的函数，ESI是复制起始地址，EDI是目的地址，ECI是要复制数据的大小
   175 0000C354 67 66 8B 06                             MOV     EAX, [ESI]          ; 把ESI代表的内存地址数据赋给EAX，省略了数据类型DWORD，实际上转移了[ESI] ~ [ESI + 3]的4Byte数据
   176 0000C358 66 83 C6 04                             ADD     ESI, 4              ; 源地址ESI += 4，一次传输DWORD（4Byte）
   177 0000C35C 67 66 89 07                             MOV     [EDI], EAX          ; 把取出数据写入内存地址EDI
   178 0000C360 66 83 C7 04                             ADD     EDI, 4              ; 目的地址EDI += 4
   179 0000C364 66 83 E9 01                             SUB     ECX, 1              ; 复制数据大小ECX--
   180 0000C368 75 EA                                   JNZ     memcpy              ; while(ECX != 0) 都执行memcpy
   181 0000C36A C3                                      RET
   182 0000C36B                                 
   183 0000C36B 00 00 00 00 00                          ALIGNB  16                  ; 用于字节对其，即一只添加DB 0，直到当前地址为16的整数
   184 0000C370                                 GDT0: ; GDT0是一种特定的GDT，不能够定义段，是 空区域
   185 0000C370 00 00 00 00 00 00 00 00                 RESB    8                   ; NULL sector
   186 0000C378 FFFF 0000 9200 00CF                     DW      0xffff, 0x0000, 0x9200, 0x00cf  ; 可以读写的段 32bit
   187 0000C380 FFFF 0000 9A28 0047                     DW      0xffff, 0x0000, 0x9a28, 0x0047  ; 可以执行的段 32bit
   188 0000C388                                 
   189 0000C388 0000                                    DW      0
   190 0000C38A                                 GDTR0: 
   191 0000C38A 0017                                    DW      8 * 3 - 1
   192 0000C38C 0000C370                                DD      GDT0                ; Data Dword GDT0，向内存中写入GDT0(4 Byte)
   193 0000C390                                 
   194 0000C390                                         ALIGNB  16
   195 0000C390                                 bootpack:
