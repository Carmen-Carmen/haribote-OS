     1 00000000                                 ; haribote-ipl
     2 00000000                                 ; 这个initial program loader启动程序加载器最多只能读10个扇区！所以文件名是ipl10
     3 00000000                                 ; TAB=4
     4 00000000                                         
     5  = 0000000A                              CYLS    EQU     10                  ; 一共读到哪个柱面，相当于声明一个常量 cyls equals 10
     6 00000000                                 
     7                                                  ORG     0x7c00              ; origin，指明程序的装载地址（从哪个内存单元开始），规定的是就是从0x00007c00 - 0x00007dff
     8 00007C00                                 
     9 00007C00                                 ; 以下的记述用于标准FAT12格式的软盘
    10 00007C00                                 
    11 00007C00 EB 4E                                   JMP     entry
    12 00007C02 90                                      DB      0x90
    13 00007C03 48 41 52 49 42 4F 54 45                 DB      "HARIBOTE"          ; 启动区名称
    14 00007C0B 0200                                    DW      512                 ; 扇区大小
    15 00007C0D 01                                      DB      1                   ; 簇大小
    16 00007C0E 0001                                    DW      1                   ; FAT起始位置
    17 00007C10 02                                      DB      2                   ; FAT个数
    18 00007C11 00E0                                    DW      224                 ; 根目录大小
    19 00007C13 0B40                                    DW      2880                ; 该磁盘的大小（2880个扇区）
    20 00007C15 F0                                      DB      0xf0                ; 磁盘种类
    21 00007C16 0009                                    DW      9                   ; FAT长度
    22 00007C18 0012                                    DW      18                  ; 1个磁道的扇区数
    23 00007C1A 0002                                    DW      2                   ; 磁头数
    24 00007C1C 00000000                                DD      0                   ; 不使用分区，即0
    25 00007C20 00000B40                                DD      2880                ; 重写一次磁盘大小
    26 00007C24 00 00 29                                DB      0, 0, 0x29          ; 意义不明，固定写法
    27 00007C27 FFFFFFFF                                DD      0xffffffff          ; （可能是）卷标号码
    28 00007C2B 48 41 52 49 42 4F 54 45 4F 53           DB      "HARIBOTEOS "       ; 11个字节的磁盘名称
       00007C35 20 
    29 00007C36 46 41 54 31 32 20 20 20                 DB      "FAT12   "          ; 8个字节的磁盘格式名称
    30 00007C3E 00 00 00 00 00 00 00 00 00 00           RESB    18
       00007C48 00 00 00 00 00 00 00 00 
    31 00007C50                                 
    32 00007C50                                 ; 程序主体
    33 00007C50                                 ; 冒号表示声明标签，这些标签可以用于指定JMP指令的跳转目的地
    34 00007C50                                 entry: ; 程序入口
    35 00007C50 B8 0000                                 MOV     AX, 0               ; 将寄存器初始化，MOV即赋值
    36 00007C53 8E D0                                   MOV     SS, AX              ; 累加寄存器AX的值赋给栈段寄存器SS
    37 00007C55 BC 7C00                                 MOV     SP, 0x7c00          ; 程序装载地址赋给栈指针寄存器SP
    38 00007C58 8E D8                                   MOV     DS, AX              ; AX的值赋给数据段寄存器DS
    39 00007C5A                                 
    40 00007C5A                                 
    41 00007C5A                                 ; 读磁盘
    42 00007C5A B8 0820                                 MOV     AX, 0x0820
    43 00007C5D 8E C0                                   MOV     ES, AX              ; 先指定扩展段寄存器ES的值为0x0820
    44 00007C5F B5 00                                   MOV     CH, 0               ; 设置柱面cylinder为0号柱面
    45 00007C61 B6 00                                   MOV     DH, 0               ; 设置磁头head为0，即软盘的正面
    46 00007C63 B1 02                                   MOV     CL, 2               ; 设置扇区sector为第2个扇区
    47 00007C65                                 
    48 00007C65                                 ; 循环读到18扇区（每个扇区512Byte）
    49 00007C65                                 readloop:
    50 00007C65 BE 0000                                 MOV     SI, 0               ; 用源变址寄存器SI记录读取失败次数，限制只能5次失败
    51 00007C68                                 retry:
    52 00007C68 B4 02                                   MOV     AH, 0x02            ; AH=0x02：读盘；0x03则是写盘
    53 00007C6A B0 01                                   MOV     AL, 1               ; 读1个扇区，AL存放读取扇区数（只能同时处理连续的扇区）
    54 00007C6C BB 0000                                 MOV     BX, 0               ; 缓冲区地址 ES:BX，用ES寄存器指定一个大概的地址，再用BX指定其中一个具体地址
    55 00007C6F B2 00                                   MOV     DL, 0x00            ; 0号驱动器，DL存放驱动器号，这个操作系统只有1个软盘驱动器
    56 00007C71                                         ; 因此缓冲区地址ES:BX为 0x0820:0x0000，软盘的一个扇区的数据将被装载到内存中0x8200~0x81ff（512字节）
    57 00007C71 CD 13                                   INT     0x13                ; CPU中断，调用磁盘BIOS
    58 00007C73                                         ; 调用磁盘BIOS的中断函数0x13，返回值如下
    59 00007C73                                         ; FLACS.CF==0: 没有错误，AH==0
    60 00007C73                                         ; FLACS.CF==1: 有错误，错误号码存入AH内
    61 00007C73                                         
    62 00007C73 73 10                                   JNC     next                 ; Jump if Not Carry，如果没有错误，就跳转到next部分
    63 00007C75                                         ; 到这边就是有错误了
    64 00007C75 83 C6 01                                ADD     SI, 1               ; SI存放了失败次数，加1
    65 00007C78 83 FE 05                                CMP     SI, 5               ; 只能失败5次
    66 00007C7B 73 32                                   JAE     error               ; Jump if Above or Equal，如果上一条CMP结果相等或者更大就跳转，即失败次数大于5次就跳转到error标签
    67 00007C7D B4 00                                   MOV     AH, 0x00            ; 重置AH寄存器（硬盘操作方式）
    68 00007C7F B2 00                                   MOV     DL, 0x00            ; 重置DL寄存器（驱动器）
    69 00007C81                                         ; AH=0x00, DL=0x00时INT 0x13是“系统复位”功能，能够将软盘状态复位
    70 00007C81 CD 13                                   INT     0x13                ; 调用磁盘BIOS，重置驱动器
    71 00007C83 EB E3                                   JMP     retry               ; 跳转回retry标签开头
    72 00007C85                                 next:   
    73 00007C85                                         ; 往后读扇区
    74 00007C85                                         ; 1. 将缓冲区地址ES:BX向后移动512Byte（0x200）
    75 00007C85 8C C0                                   MOV     AX, ES              
    76 00007C87 05 0020                                 ADD     AX, 0x0020
    77 00007C8A 8E C0                                   MOV     ES, AX              ; 因为ES寄存器不能接受ADD指令，所以要先把ES寄存器中数据放到AX中，加完再放回来
    78 00007C8C                                         ; 2. 扇区向后移动1个
    79 00007C8C 80 C1 01                                ADD     CL, 1
    80 00007C8F 80 F9 12                                CMP     CL, 18              ; 注意一共只有18个扇区
    81 00007C92 76 D1                                   JBE     readloop            ; Jump if Below or Equal，跳转回readloop循环的开头；否则读取完毕
    82 00007C94                                         
    83 00007C94                                         ; 换一个磁头读，即读当前柱面的反面
    84 00007C94 B1 01                                   MOV     CL, 1               ; 重新把CL即扇区置为1
    85 00007C96 80 C6 01                                ADD     DH, 1               ; 磁头号加1
    86 00007C99 80 FE 02                                CMP     DH, 2               ; 一共只有2个磁头
    87 00007C9C 72 C7                                   JB      readloop            ; Jump if Below，如果磁头号<2就跳回readloop，注意此时CL也就是扇区号为1，因此会重复“往后读扇区”部分的代码，直到读完第18个扇区
    88 00007C9E                                 
    89 00007C9E                                         ; 向内读柱面
    90 00007C9E B6 00                                   MOV     DH, 0               ; 重新把磁头号置为0
    91 00007CA0 80 C5 01                                ADD     CH, 1               ; CH加1，即柱面号加1
    92 00007CA3 80 FD 0A                                CMP     CH, CYLS            ; CYLS=10
    93 00007CA6 72 BD                                   JB      readloop            ; 如果还没读到第10柱面，就跳转回readloop，此时会从该柱面的0号磁头（正面）的第一扇区开始读       
    94 00007CA8                                        
    95 00007CA8                                 ; 读盘完成后执行haribote.sys
    96 00007CA8 88 2E 0FF0                              MOV     [0x0ff0], CH        ; 记录IPL（启动程序加载器）究竟读取到哪个柱面，记在地址号0x0ff0的内存中
    97 00007CAC E9 4551                                 JMP     0xc200
    98 00007CAF                                 
    99 00007CAF                                 
   100 00007CAF                                 ; 读盘错误的处理
   101 00007CAF                                 ; 比如更改磁头为2就能触发错误，因为只有0号和1号磁头的在（正反面）
   102 00007CAF                                 error: 
   103 00007CAF BE 7CC7                                 MOV     SI, msg             ; 把msg的内存地址放到源变址寄存器，用于显示错误信息 
   104 00007CB2                                 
   105 00007CB2                                 putloop: 
   106 00007CB2 8A 04                                   MOV     AL, [SI]            ; 源变址寄存器SI中存放的内存地址，取出其对应内存单元中数据，赋给累加寄存器低位AL
   107 00007CB4 83 C6 01                                ADD     SI, 1               ; SI值+1，感觉就是把msg标签中的汇编指令一条一条向下执行，直到执行到写了“0”的内存单元
   108 00007CB7 3C 00                                   CMP     AL, 0               ; 将AL的值与0进行比较，AL中的值是SI中数据对应内存地址中存放的数据
   109 00007CB9 74 09                                   JE      fin                 ; Jump if Equal，即上一条CMP的结果为真，则跳转到fin标签；否则继续执行
   110 00007CBB                                         ; 到这里就证明AL中的值不是0
   111 00007CBB B4 0E                                   MOV     AH, 0x0e            ; 显示一个文字
   112 00007CBD BB 000F                                 MOV     BX, 15              ; 指定字符颜色，BH: 0000，BL: 1111
   113 00007CC0 CD 10                                   INT     0x10                ; CPU中断，调用显卡BIOS（basic input/output system）
   114 00007CC2 EB EE                                   JMP     putloop             ; 跳转到循环的开头    
   115 00007CC4                                 
   116 00007CC4                                 fin: 
   117 00007CC4 F4                                      HLT                         ; 让CPU休眠
   118 00007CC5 EB FD                                   JMP     fin                 ; 无限循环fin
   119 00007CC7                                 
   120 00007CC7                                 msg: ; 错误信息显示
   121 00007CC7 0A 0A                                   DB      0x0a, 0x0a          ; 换行2次
   122 00007CC9 6C 6F 61 64 20 65 72 72 6F 72           DB      "load error"     ; 利用Data Byte指令，把字符串中每一个字符对应的代码一个一个写入内存中
   123 00007CD3 0A                                      DB      0x0a                ; 换行1次
   124 00007CD4 00                                      DB      0                   ; 0x00是停止
   125 00007CD5                                 
   126 00007CD5 00 00 00 00 00 00 00 00 00 00           RESB    0x7dfe - $          ; 从当前字节开始，填写0x00，直到地址0x001fe
       00007CDF 00 00 00 00 00 00 00 00 00 00 
       00007CE9 00 00 00 00 00 00 00 00 00 00 
       00007CF3 00 00 00 00 00 00 00 00 00 00 
       00007CFD 00 00 00 00 00 00 00 00 00 00 
       00007D07 00 00 00 00 00 00 00 00 00 00 
       00007D11 00 00 00 00 00 00 00 00 00 00 
       00007D1B 00 00 00 00 00 00 00 00 00 00 
       00007D25 00 00 00 00 00 00 00 00 00 00 
       00007D2F 00 00 00 00 00 00 00 00 00 00 
       00007D39 00 00 00 00 00 00 00 00 00 00 
       00007D43 00 00 00 00 00 00 00 00 00 00 
       00007D4D 00 00 00 00 00 00 00 00 00 00 
       00007D57 00 00 00 00 00 00 00 00 00 00 
       00007D61 00 00 00 00 00 00 00 00 00 00 
       00007D6B 00 00 00 00 00 00 00 00 00 00 
       00007D75 00 00 00 00 00 00 00 00 00 00 
       00007D7F 00 00 00 00 00 00 00 00 00 00 
       00007D89 00 00 00 00 00 00 00 00 00 00 
       00007D93 00 00 00 00 00 00 00 00 00 00 
       00007D9D 00 00 00 00 00 00 00 00 00 00 
       00007DA7 00 00 00 00 00 00 00 00 00 00 
       00007DB1 00 00 00 00 00 00 00 00 00 00 
       00007DBB 00 00 00 00 00 00 00 00 00 00 
       00007DC5 00 00 00 00 00 00 00 00 00 00 
       00007DCF 00 00 00 00 00 00 00 00 00 00 
       00007DD9 00 00 00 00 00 00 00 00 00 00 
       00007DE3 00 00 00 00 00 00 00 00 00 00 
       00007DED 00 00 00 00 00 00 00 00 00 00 
       00007DF7 00 00 00 00 00 00 00 
   127 00007DFE                                 
   128 00007DFE 55 AA                                   DB      0x55, 0xaa          ; 启动区最后2个字节的内容应是0x55和0xAA
   129 00007E00                                 
   130 00007E00                                 
